pipeline {
    agent any
    parameters {
        choice(name: 'ENV', choices: ['dev', 'prod'], description: 'Select the environment to deploy')
    }
    stages {
        stage('Debug') {
    steps {
        script {
            dir('day1') {
                sh 'ls -la'  // Lists all files in the directory; adjust path as needed
            }
        }
    }
}
        stage('Initialize') {
            steps {
                script {
                    // Securely bind credentials
                     dir('day1'){ withCredentials([[
                        $class: 'UsernamePasswordMultiBinding',
                        credentialsId: 'aws_credentials',
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        // Initialize Terraform
                         sh 'echo $AWS_ACCESS_KEY_ID'
                         sh 'echo $AWS_SECRET_ACCESS_KEY'

                        sh 'terraform init'
                    }}
                }
            }
        }
        stage('Select Workspace') {
            steps {
               script {
                    // Select or create Terraform workspace based on the provided parameter
                    dir('day1') {  sh "terraform workspace select ${params.ENV} || terraform workspace new ${params.ENV}"
                }}
            }
        }
        stage('Apply') {
            steps {
                script {
                    // Securely bind credentials again for the apply stage
                     dir('day1'){ withCredentials([[
                        $class: 'UsernamePasswordMultiBinding',
                        credentialsId: 'aws_credentials',
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        // Apply Terraform configuration using the appropriate tfvars file for the environment
                        sh "terraform apply -auto-approve --var-file ${params.ENV}.tfvars"
                    }

                                }
                }
            }
        }
    }
}

